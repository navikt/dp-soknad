package no.nav.dagpenger.soknad.livssyklus

import mu.KotlinLogging
import no.nav.dagpenger.soknad.S√∏knadMediator
import no.nav.dagpenger.soknad.hendelse.Journalf√∏rtHendelse
import no.nav.helse.rapids_rivers.JsonMessage
import no.nav.helse.rapids_rivers.MessageContext
import no.nav.helse.rapids_rivers.RapidsConnection
import no.nav.helse.rapids_rivers.River

internal class Journalf√∏rtMottak(
    rapidsConnection: RapidsConnection,
    private val mediator: S√∏knadMediator
) : River.PacketListener {
    companion object {
        private val logger = KotlinLogging.logger {}
    }

    init {
        River(rapidsConnection).apply {
            validate { it.demandValue("@event_name", "innsending_ferdigstilt") }
            validate { it.demandValue("type", "NyS√∏knad") }
            validate { it.requireKey("f√∏dselsnummer", "journalpostId") }
            validate {
                it.require("s√∏knadsData") { data ->
                    data["s√∏knad_uuid"].asUUID()
                }
            }
        }.register(this)
    }

    override fun onPacket(packet: JsonMessage, context: MessageContext) {
        val journalpostId = packet["journalpostId"].asText()
        val ident = packet["f√∏dselsnummer"].asText()

        /**
         * TODO: B√∏r vi gj√∏re det s√•nn? üòÖ
         * Alternativ 1: Hente ut s√∏knads id fra s√∏knadsData. Kan gj√∏res i:
         * - dp-mottak
         * - dp-behov-journalpost
         * - eller her
         *
         * Alternativ 2: Finne s√∏knad etter journalpost i v√•r database
         * Alternativ 3: La journalpost eksistere for seg selv i modellen, med en to-veis kobling mellom Journalpost og
         * S√∏knad. Da kan journalpost ha sin egen tilstand og s√∏knad delegere/sp√∏rre den
         */
        val s√∏knadsId = packet["s√∏knadsData"]["s√∏knad_uuid"].asUUID()
        val journalf√∏rtHendelse = Journalf√∏rtHendelse(s√∏knadsId, journalpostId, ident)
        logger.info { "F√•tt l√∏sning for innsending_ferdigstilt for $journalpostId" }
        mediator.behandle(journalf√∏rtHendelse)
    }
}
